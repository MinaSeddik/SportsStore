# install apache web server on linux ubuntu
apt install nginx

# start / stop / restart / status apache
service nginx status
service nginx start
service nginx stop
service nginx restart

systemctl start nginx
systemctl status nginx
systemctl stop nginx
systemctl restart nginx
systemctl reload nginx


# enable website (just by creating symbolic link of the target website you want to enable)
sudo ln -s /etc/nginx/sites-available/mywebsite /etc/nginx/sites-enabled/

# disable website (just by removing symbolic link of the target website you want to disable)
sudo rm /etc/nginx/sites-enabled/mywebsite

# whenever enabling or disabling a website, you should reload the config vis
systemctl reload nginx



server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /home/mina/Desktop/SportsStore/dist/sports-store/browser;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;


	# specify the configuration for the '/' location
	# Very important for Angular SPA
    location / {
        # try to serve the requested URI. if that fails then try to
        # serve the URI with a trailing slash. if that fails, then
        # serve the index.html file; this is needed in order to serve
        # Angular routes--e.g.,'localhost:8080/customer' will serve
        # the index.html file
        try_files $uri $uri/ /index.html;
    }

}






# location directive explanation
server {
  ...

      // fruits will be appended to the root specified
      // The path "/fruits" will be appended to the path
      location /fruits {
          root /home/mina/;
      }


      // carbs will NOT be appended to the alias specified
      location /carbs {
          alias /home/mina/fruits;
      }

      //
      location /vegetables {
          root /home/mina/;
          try_files /vegetables/veggis.html
      }
}

#if the request is http:localhost/fruits  => then it will lookup files inside /home/mina/fruits

server
{
 location /
 {
        root /data/www;
  }

    location /images/
    {
        root /data;
    }
}


#Setting Up a Simple Proxy Server

server
{
    listen 8080;

    # Note that the root directive is placed in the server context. Such root directive is used
    # when the location block selected for serving a request does not include its own root directive.
    root /data/up1;

    location /
    {
    }
}



server {
    location / {
        proxy_pass http://localhost:8080;
    }

  location ~ \.(gif|jpg|png)$
  {
      root /data/images;
  }
}

# redirection
#-------------------
server
{
        listen 80;
        server_name www.olddomain.com;
        return 301 $scheme://www.newdomain.com$request_uri;
}
#$scheme and $request_uri. The variable $scheme is used to define scheme of the URL (http or https) and
#the variable $request_uri contains complete URI with parameters if any.
#------------------------------------------------------------------

location /
{
        # First attempt to serve request as file, then as directory, then fall back to displaying a 404.
        try_files $uri $uri/ $uri/index.html =404;
}

location /base
{
        return 301 file1.html;
}

# "=" match exact
location = /whatever
{
        # rewrite regex replacement-url [flag];
        rewrite ^/whatever$ /file2.html;
        #rewrite ^/whatever$ $scheme://$host/file2.html;
}

location = /nginx-tutorial {
      rewrite ^/nginx-tutorial?$ /somePage.html break;
}

location /
{
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ $uri/index.html =404;
}

location /base
{
        return 301 file1.html;
}

location = /whatever
{
        rewrite ^/whatever$ /file2.html;
        #rewrite ^/whatever$ $scheme://$host/file2.html;
}


# Now consider a dynamic page https://www.example.com/user.php?id=11 where the dynamic part is id=11(userid).
# We want the URL to be rewritten to https://exampleshop.com/user/11

location = /user.php
{
      rewrite user.php?id=([0-9]*)$ user/$1;
}

